#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app     = require('nodame/app');
var debug   = require('debug')(nodame.config('app.debug_name'));
var http    = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = '3000'

if (validate.isDefined(process.env.PORT)) {
    port = normalizePort(process.env.PORT);
}

// Overwrite port from config
if (nodame.config('server.port') !== null) {
    port = normalizePort(nodame.config('server.port'));
}

// Overwrite from argv
if (validate.isDefined(nodame.argv.port)) {
    port = normalizePort(nodame.argv.port);
}

app.set('port', port);

/**
 * Create HTTP server.
 */

var server  = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
var version = nodame.settings.app.version;
var versionMargin = Array(10 - version.length).join(' ');
var _spc    = Array(12).join(' ');
console.log('');
console.log('');
console.log(_spc, '               .   ', versionMargin, version);
console.log(_spc, '     ,-. ,-. ,-| ,-. ,-,-. ,-.');
console.log(_spc, '     | | | | | | ,-| | | | |-\'');
console.log(_spc, '     \' \' `-\' `-\' `-^ \' \' \' `-\'');
console.log(_spc, '-----------------------------------');
console.log(_spc, 'https://github.com/tokopedia/nodame');
console.log('');
console.log(sprintf('Hi Nobita! Doraemon is serving you at %s', port));
console.log(sprintf('environment    : %s', nodame.env()));
console.log(sprintf('device capture : %s', nodame.config('view.device_capture')))
// console.log('Running in', nodame.env(), 'with', 'Enforce mobile', nodame.config('view.enforce_mobile') != 'false' ? 'enabled in ' + (ENFORCE_MOBILE) + ' mode' : 'disabled');
console.log(sprintf('config file    : %s', nodame.settings.__systems.configPath));
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
