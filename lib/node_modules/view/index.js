var path = require('path');
var swig = require('swig');

module.exports = (function () {
    var __path = function (req, module, file) {
        var device      = 'desktop';
        var template    = 'default';

        if (req && req.device.type == 'phone') {
            device = 'mobile';
        }

        if (TEMPLATE !== null) {
            template = TEMPLATE;
        }

        if (device == 'phone' && MOBILE_TEMPLATE !== null) {
            template = MOBILE_TEMPLATE;
        }

        return path.join(device, TEMPLATE, module, file);
    };

    var init = function (app) {
        app.engine('html', swig.renderFile)
        app.set('views', nodame.appPath() + '/views');
        app.set('view engine', 'html');

        var swigLocals = {
            'currentYear': (new Date()).getFullYear(),
            'is_dev': IS_DEV,
            'menu': nodame.config('menu')
            // 'processTime': function () {
            //     return '0.000000';
            // }
        };

        if (IS_DEV) {
            app.set('view cache', false);
            swig.setDefaults({
                locals: swigLocals,
                cache: false
            });
        }
        else {
            swig.setDefaults({
                locals: swigLocals
            });
        }

        swig.setFilter('push', filterPush);
        swig.setFilter('range', filterRange);
        swig.setFilter('even', filterEven);
    };

    var filterPush = function (arr, val) {
        arr.push(val);
        return arr;
    };

    var filterRange = function (arr, start, end, step) {
        var range = [];
        var typeofStart = typeof start;
        var typeofEnd = typeof end;

        if (step === 0) {
            throw TypeError("Step cannot be zero.");
        }

        if (typeofStart == "undefined" || typeofEnd == "undefined") {
            throw TypeError("Must pass start and end arguments.");
        }
        // else if (typeofStart != typeofEnd) {
        //     console.log(typeofStart);
        //     console.log(typeofEnd);
        //     throw TypeError("Start and end arguments must be of same type.");
        // }

        typeof step == "undefined" && (step = 1);

        if (end < start) {
            step = -step;
        }

        if (typeofStart == "number") {

            while (step > 0 ? end >= start : end <= start) {
                range.push(start);
                start += step;
            }

        } else if (typeofStart == "string") {

            if (start.length != 1 || end.length != 1) {
                throw TypeError("Only strings with one character are supported.");
            }

            start = start.charCodeAt(0);
            end = end.charCodeAt(0);

            while (step > 0 ? end >= start : end <= start) {
                range.push(String.fromCharCode(start));
                start += step;
            }

        } else {
            throw TypeError("Only string and number types are supported");
        }

        return range;

    };

    var filterEven = function (input) {
        if (input % 2 == 0) {
            return true;
        }
        else{
            return false;
        }
    };

    return {
        init: init,
        path: __path
    };
})();
