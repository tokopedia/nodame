/**
 * @author  Argi Karunia <arugikaru@yahoo.co.jp>
 * @link    https://github.com/tokopedia/nodame
 * @license http://opensource.org/licenses/MIT
 *
 * @version 1.0.0
 */

var config = (function () {
    var path        = require('path');
    var toml        = require('nodame/toml');
    var json        = require('nodame/json');
    var fs          = require('fs');
    var __appPath   = '';
    var __argv      = null;

    var getPath = function () {
        var stream  = path.normalize(sprintf('%s/%s/main.toml', __appPath, 'configs'));

        if (__argv === null) {
            throw 'nodame/config requires nodame/argv to be ran first.';
        }

        if (__argv.config !== undefined) {
            if (__argv.config.substring(0,1) !== '/') {
                stream = path.normalize(sprintf('%s/%s', __appPath, __argv.config));
            } else {
                stream = path.normalize(__argv.config);
            }
        }

        return stream;
    };

    var setDefault = function (configs) {
        var defCfg = require(__dirname + '/config.json');
        checkDefault(defCfg, configs);
        console.log();
        checkDefaultModule('module', defCfg, configs);
        checkDefaultModule('menu', defCfg, configs);
    };

    var checkDefault = function (obj1, obj2) {
        for (var prop in obj1) {
            if (typeof(obj1[prop]) == 'object') {
                if (prop != '__default') {
                    if (obj2[prop] === undefined) {
                        obj2[prop] = obj1[prop];
                    } else {
                        checkDefault(obj1[prop], obj2[prop]);
                    }
                }
            } else {
                if (obj2[prop] === undefined) {
                    obj2[prop] = obj1[prop];
                }
            }
        }
    };

    var checkDefaultModule = function (key, obj1, obj2) {
        var defObj = obj1[key].items.__default;

        for (var item in obj2[key].items) {
            for (var prop in defObj) {
                if (obj2[key].items[item][prop] === undefined) {
                    obj2[key].items[item][prop] = defObj[prop];
                }
            }
        }
    };

    var parse = function (argv, appPath) {
        __argv          = argv;
        __appPath       = appPath;
        var configPath  = getPath();
        var configs     = toml.parse(fs.readFileSync(configPath));
        setDefault(configs);
        toml.parseVar(configs);

        return {
            configs : configs,
            path    : configPath
        };
    };

    return {
        parse   : parse
    };
})();

module.exports = config;
