var config = (function () {
    var path    = require('path');
    var toml    = require('nodame/toml');
    var fs      = require('fs');
    var configs = {};

    var getPath = function () {
        var stream  = path.normalize(sprintf('%s/%s/main.ini', nodame.appPath(), 'configs'));

        if (nodame.argv === undefined) {
            throw 'nodame/config requires nodame/argv to be ran first.';
        }

        if (nodame.argv.config !== undefined) {
            if (nodame.argv.config.substring(0,1) !== '/') {
                stream = path.normalize(sprintf('%s/%s', nodame.appPath(), nodame.argv.config));
            } else {
                stream = path.normalize(nodame.argv.config);
            }
        }

        return stream;
    };

    var read = function (obj, params) {
        if (typeof(params) === 'string') {
            params = params.split('.');
        }

        if (params.length == 0) {
            return obj;
        }

        if (params.length > 1) {
            obj = obj[params[0]];
            params.shift();
            return read(obj, params);
        } else {
            obj = obj[params[0]];
            return obj;
        }
    };

    var __parseVar  = function (obj, str) {
        var re      = /\{{2} *[a-z0-9._]+ *\}{2}/gi;
        var found   = str.match(re);

        if (found) {
            for (var i in found) {
                var search  = found[i];
                var params  = search.match(/[a-z0-9._]+/i);

                if (params) {
                    params  = params[0];
                } else {
                    return str;
                }

                var replace = read(configs, params);
                str         = str.replace(search, replace);
            }
        }

        return str;
    };

    var __parseFunc = function (str) {
        var re      = /(\(.+\|[a-z_]+\))/gi;
        var found   = str.match(re);

        if (found) {
            for (var i in found) {
                var search  = found[i];
                var vars    = search.replace(/[()]+/g, '').split('|');

                if (vars[1] === 'url_encode') {
                    var replace = encodeURIComponent(vars[0]);
                    str  = str.replace(search, replace);
                }
            }
        }

        return str;
    };

    var parseVar = function (obj, path) {
        path = path || [];

        if (typeof(obj) === 'object') {
            for (var i in obj) {
                if (typeof(obj[i]) === 'string') {
                    obj[i] = __parseVar(obj, obj[i]);
                    obj[i] = __parseFunc(obj[i]);
                } else {
                    var __path = path.slice();
                    __path.push(i);
                    parseVar(obj[i], __path);
                }
            }
        }
    };

    var parse = function () {
        var configPath  = getPath();
        nodame.settings.__systems.configPath = configPath;
        configs         = toml.parse(fs.readFileSync(configPath));
        parseVar(configs);
        console.log(configs);
        return configs;
    };

    return {
        parse   : parse
    };
})();

module.exports = config;
