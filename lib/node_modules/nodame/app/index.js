// Global variable
sprintf             = require('sprintf-js').sprintf;
vsprintf            = require('sprintf-js').vsprintf;
nodame              = require('nodame/core');

var cookieParser    = require('cookie-parser');
var bodyParser      = require('body-parser');
var device          = require('express-device');
var methodOverride  = require('method-override');
var fs              = require('fs');
var path            = require('path');

// Private Modules
var toml            = require('nodame/toml');
var file            = require('nodame/file');

// Expressjs initialization
var app             = nodame.express();
app.env             = nodame.env();

var Package         = file.readJSON(sprintf('%s/package.json', nodame.sysPath()));
nodame.set('app', {
    name        : Package.name,
    version     : Package.version,
    homepage    : Package.homepage,
    authors     : Package.authors,
    license     : Package.license
});

// Trust proxy setup
app.set('trust proxy', 'uniquelocal');
app.enable('trust proxy');

var config = require('nodame/config').parse();
var configStream = __dirname + '/configs/main.ini';

// Config constants
MAINTENANCE         = config.server.maintenance === true;
TEMPLATE            = config.app.template;
MOBILE_TEMPLATE     = config.app.mobile_template;
ENFORCE_MOBILE      = config.app.enforce_mobile;
API_PROTOCOL        = config.app.api_protocol;
APPNAME             = config.app.appname;
CONFIG_DIR_PATH     = configStream.replace(/\/[a-zA-Z0-9\-\.]+$/, '');

// Load and store assets config
var assetsFilename  = nodame.isDev ? 'assets.ini' : '.assets';
var assetsStream    = path.normalize(sprintf('%s/configs/%s', nodame.appPath(), assetsFilename));
config.assets       = nodame.isDev ? file.readGRUNT(assetsStream) : file.readJSON(assetsStream);

// Store config to app
app.set('config', config);
nodame.set('config', config);

// X-Powered-By header
app.set('x-powered-by', config.server.enable_powered_by);

// Device capture
app.use(device.capture());

// Log setup
var logger        = require('nodame/logger');
app.use(logger.error());
app.use(logger.access());

// Block favicon request
app.use(function (req, res, next) {
    if (req.url === '/favicon.ico') {
        res.writeHead(200, {'Content-Type': 'image/x-icon'});
        res.end();
    } else {
        next();
    }
});

// Static server setup
if (config.server.static.enable) {
    var staticRoute = path.normalize(sprintf('/%s', config.server.static.route));
    var staticDir   = path.normalize(sprintf('%s/%s', nodame.appPath(), config.server.static.dir));
    app.use(staticRoute, require('serve-static')(staticDir));
}

// View engine setup
require('nodame/view').init(app);

// Redirect non-https on production
app.use(function (req, res, next) {
    if (!nodame.isDev) {
        if (!req.secure) {
            res.redirect(config.server.url.hostname + req.originalUrl);
            next = false;
        }
    }

    if (next) return next();
});

// Middlewares Setups
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(methodOverride());

// Locals setup
require('nodame/locals')(app);

// i18n setup
require('nodame/locale')(app);

// Numeral setup
require('nodame/numeral')(app);

// Enforce mobile setup
app.use(nodame.enforceMobile());

// Locals helper setup
app.use(nodame.locals(app));

app.use(function (req, res, next) {
    res.locals.path = new Object();
    var fullpath = req.originalUrl;
    res.locals.path['full'] = fullpath;
    res.locals.path['module'] = fullpath.replace('/' + APPNAME, '');

    if (next) return next();
});

app.use(function (req, res, next) {
    if (MAINTENANCE) {
        html = require('nodame/html').new(req, res);
        html.headTitle('Tokopedia');
        html.headDescription('tokopedia');
        res.status(503);
        html.render({
            module: 'errors',
            file: '503'
        });
    }

    if (next && !MAINTENANCE) return next();
});

// Routes setup
require('nodame/router')(app);

// Errors setup
require('nodame/error')(app);

module.exports = app;
