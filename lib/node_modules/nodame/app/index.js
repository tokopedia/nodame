// Global variable
sprintf             = require('sprintf-js').sprintf;
vsprintf            = require('sprintf-js').vsprintf;
nodame              = require('nodame/core');
validate            = require('nodame/validate');

var cookieParser    = require('cookie-parser');
var bodyParser      = require('body-parser');
var methodOverride  = require('method-override');
var fs              = require('fs');
var path            = require('path');

// Private Modules
var toml            = require('toml');
var file            = require('nodame/file');

// Expressjs initialization
var app             = nodame.express();
app.env             = nodame.env();

// console.log(nodame.settings.config);

// Load package information
var Package         = file.readJSON(sprintf('%s/package.json', nodame.sysPath()));

nodame.set('app', {
    name        : Package.name,
    version     : Package.version,
    homepage    : Package.homepage,
    authors     : Package.authors,
    license     : Package.license
});

// Trust proxy setup
app.set('trust proxy', 'uniquelocal');
app.enable('trust proxy');

// Load and store assets config
var assetsFilename  = nodame.isDev() ? 'assets.toml' : '.assets';
var assetsStream    = path.normalize(sprintf('%s/configs/%s', nodame.appPath(), assetsFilename));
var assets          = nodame.isDev() ? file.readGRUNT(assetsStream) : file.readJSON(assetsStream);
nodame.set('assets', assets);

// X-Powered-By header
app.set('x-powered-by', nodame.config('server.powered_by'));

// Device capture  setup
if (nodame.config('view.device_capture')) {
    app.use(require('express-device').capture());
}

// Log setup
// TODO: disable logger
var logger      = require('nodame/logger');

app.use(logger.error());
app.use(logger.access());

// Block favicon request
if (nodame.config('server.block_favicon')) {
    app.use(function (req, res, next) {
        if (req.url === '/favicon.ico') {
            res.writeHead(200, {'Content-Type': 'image/x-icon'});
            res.end();
        } else {
            next();
        }
    });
}

// Static server setup
if (nodame.config('assets.enable_server')) {
    var staticRoute = path.normalize(sprintf('/%s', nodame.config('assets.route')));
    var staticDir   = path.normalize(sprintf('%s/%s', nodame.appPath(), nodame.config('assets.dir')));

    app.use(staticRoute, require('serve-static')(staticDir));
}

// View engine setup
require('nodame/view').init(app);

// Redirect non-https on production
if (nodame.config('server.enforce_secure')) {
    app.use(function (req, res, next) {
        if (!nodame.isDev()) {
            if (!req.secure) {
                res.redirect(nodame.config('url.hostname') + req.originalUrl);
                next = false;
            }
        }

        if (next) return next();
    });
}

// Middlewares Setups
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(methodOverride());

// Locals setup
require('nodame/locals')(app);

// i18n setup
require('nodame/locale')(app);

// Numeral setup
require('nodame/numeral')(app);

// Enforce mobile setup
if (nodame.config('view.device_capture') && nodame.config('view.enforce_mobile')) {
    app.use(nodame.enforceMobile());
}

// Locals helper setup
app.use(nodame.locals(app));

app.use(function (req, res, next) {
    var fullpath            = req.originalUrl;
    var appName             = nodame.config('app.name');
    res.locals.path         = {};
    res.locals.path.full    = fullpath;
    res.locals.path.module  = fullpath.replace('/' + appName, '');

    if (next) return next();
});

// Maintenance setup
if (nodame.config('server.maintenance')) {
    app.use(function (req, res, next) {
        var html = require('nodame/html').new(req, res);
        html.headTitle(nodame.config('app.title'));
        html.headDescription(nodame.config('app.desc'));
        res.status(503);
        html.render({
            module: 'errors',
            file: '503'
        });
    });
}

// Routes setup
require('nodame/router')(app);

// Errors setup
require('nodame/error')(app);

if (nodame.config('server.hooks').length > 0) {
    for (var hook in nodame.config('server.hooks')) {
        nodame.require(sprintf('my_hooks/%s', hook)).init();
    }
}

module.exports = app;
