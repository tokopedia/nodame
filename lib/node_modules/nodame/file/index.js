/**
 * @author  Argi Karunia <arugikaru@yahoo.co.jp>
 * @link    https://github.com/tokopedia/nodame
 * @license http://opensource.org/licenses/MIT
 *
 * @version 1.0.0
 */

var sha512 = require('js-sha512').sha512;

exports.readJSON = function (filepath) {
    var fs = require('fs');

    if (!fs.statSync(filepath)) {
        return;
    }

    return JSON.parse(fs.readFileSync(filepath));
};

exports.readGRUNT = function (filepath) {
    var path        = require('path');
    var appPath     = path.normalize(__dirname + '/../../../../../..');
    var json        = this.readTOML(filepath);
    var confDir     = path.dirname(filepath);
    var config      = this.readTOML(confDir + '/main.toml');
    var assetsDir   = path.normalize(appPath + '/assets');

    if (config.assets.dir !== undefined) {
        if (config.assets.dir.substr(0, 1) == '/') {
            assetsDir = config.assets.dir;
        } else {
            assetsDir = path.normalize(appPath + '/' + config.assets.dir);
        }
    }

    var grunt       = {};

    var typeDir     = {
        css: 'css',
        js: 'scripts'
    };

    for (var groups in json) {
        for (var group in json[groups]) {
            for (var type in json[groups][group]) {
                if (grunt[type] === undefined) {
                    grunt[type] = [];
                }

                var baseName    = assetsDir + '/min/' + groups + '.' + group;
                var hash        = __hash(baseName + type, 8);
                var dest        = baseName + '.min.' + hash  + '.' + type;
                var destSrc     = {};
                destSrc[dest]   = [];
                var baseDir     = assetsDir + '/' + typeDir[type] + '/';

                if (group != 'global') {
                    var goFiles = json[groups].global[type];

                    for (var i in goFiles) {
                        destSrc[dest].push(baseDir + goFiles[i]);
                    }
                }

                if (json[groups][group][type].length > 0) {
                    for (var j in json[groups][group][type]) {
                        var filename = json[groups][group][type][j];

                        if (filename !== undefined) {
                            var _filepath = baseDir + json[groups][group][type][j];

                            destSrc[dest].push(_filepath);
                        }
                    }
                }

                grunt[type].push(destSrc);
            }
        }
    }

    return grunt;
};

var __hash = function (str, length) {
    var hash = sha512(str + new Date());

    if (length !== undefined && length < hash.length) {
        var start = 0;

        if (length < Math.floor(hash.length / 2)) {
            start = Math.floor(hash.length / 2) - Math.floor(length / 2);
        }

        hash = hash.substr(start, length);
    }

    return hash;
};

exports.readTOML = function (filepath) {
    var fs      = require('fs');
    var toml    = require('toml');

    if (!fs.statSync(filepath)) {
        return;
    }

    return toml.parse(fs.readFileSync(filepath));
};
